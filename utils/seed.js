const mongoose = require('mongoose');
require('dotenv').config();

const Coach = require('../models/Coach');
const Session = require('../models/Session');

// Donn√©es des coaches par d√©faut
const defaultCoaches = [
    {
        name: 'Soukeyna',
        email: 'soukeyna@coachtrack.com',
        phone: '+221 77 123 4567'
    },
    {
        name: 'Fabacary',
        email: 'fabacary@coachtrack.com',
        phone: '+221 77 765 4321'
    }
];

// Fonction pour se connecter √† MongoDB
async function connectToDatabase() {
    try {
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('‚úÖ Connect√© √† MongoDB');
    } catch (error) {
        console.error('‚ùå Erreur de connexion √† MongoDB:', error.message);
        process.exit(1);
    }
}

// Fonction pour cr√©er les coaches par d√©faut
async function seedCoaches() {
    try {
        console.log('üå± Initialisation des coaches...');
        
        // V√©rifier si des coaches existent d√©j√†
        const existingCoaches = await Coach.find();
        
        if (existingCoaches.length > 0) {
            console.log('üìã Les coaches existent d√©j√†:');
            existingCoaches.forEach(coach => {
                console.log(`   - ${coach.name} (${coach.email})`);
            });
            return existingCoaches;
        }
        
        // Cr√©er les coaches par d√©faut
        const coaches = [];
        for (const coachData of defaultCoaches) {
            const coach = new Coach(coachData);
            const savedCoach = await coach.save();
            coaches.push(savedCoach);
            console.log(`‚úÖ Coach cr√©√©: ${savedCoach.name}`);
        }
        
        console.log(`üéâ ${coaches.length} coaches cr√©√©s avec succ√®s!`);
        return coaches;
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation des coaches:', error.message);
        throw error;
    }
}

// Fonction pour cr√©er des sessions d'exemple (optionnel)
async function seedSampleSessions(coaches) {
    try {
        console.log('üå± Cr√©ation de sessions d\'exemple...');
        
        // V√©rifier si des sessions existent d√©j√†
        const existingSessions = await Session.find();
        if (existingSessions.length > 0) {
            console.log('üìã Des sessions existent d√©j√†, ignorer la cr√©ation d\'exemples');
            return;
        }
        
        // Sessions d'exemple pour Soukeyna
        const sampleSessions = [
            {
                coachId: coaches[0]._id, // Soukeyna
                date: new Date('2025-01-15'),
                equipment: 'reformer',
                type: 'practice',
                hours: 2,
                notes: 'Session de pratique intensive'
            },
            {
                coachId: coaches[0]._id, // Soukeyna
                date: new Date('2025-01-16'),
                equipment: 'mat',
                type: 'observation',
                hours: 1.5,
                notes: 'Observation d\'un cours avanc√©'
            },
            {
                coachId: coaches[1]._id, // Fabacary
                date: new Date('2025-01-14'),
                equipment: 'chair',
                type: 'practice',
                hours: 1,
                notes: 'Premi√®re session sur chair'
            }
        ];
        
        let createdCount = 0;
        for (const sessionData of sampleSessions) {
            const session = new Session(sessionData);
            await session.save();
            createdCount++;
        }
        
        console.log(`‚úÖ ${createdCount} sessions d'exemple cr√©√©es`);
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation des sessions:', error.message);
        // Ne pas faire √©chouer le script pour les sessions d'exemple
    }
}

// Fonction pour afficher les statistiques
async function showStatistics() {
    try {
        const coachCount = await Coach.countDocuments();
        const sessionCount = await Session.countDocuments();
        
        console.log('\nüìä Statistiques de la base de donn√©es:');
        console.log(`   - Coaches: ${coachCount}`);
        console.log(`   - Sessions: ${sessionCount}`);
        
        // Afficher les progr√®s de chaque coach
        const coaches = await Coach.find();
        for (const coach of coaches) {
            const progress = await Session.getCoachProgress(coach._id);
            console.log(`\nüë§ ${coach.name}:`);
            console.log(`   - Reformer: ${progress.reformer.total}h / 27h (${progress.reformer.totalPercentage.toFixed(1)}%)`);
            console.log(`   - Tapis: ${progress.mat.total}h / 15h (${progress.mat.totalPercentage.toFixed(1)}%)`);
            console.log(`   - Chaise: ${progress.chair.total}h / 15h (${progress.chair.totalPercentage.toFixed(1)}%)`);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'affichage des statistiques:', error.message);
    }
}

// Fonction principale
async function main() {
    console.log('üöÄ Initialisation de la base de donn√©es...\n');
    
    try {
        // Se connecter √† MongoDB
        await connectToDatabase();
        
        // Cr√©er les coaches par d√©faut
        const coaches = await seedCoaches();
        
        // Cr√©er des sessions d'exemple si demand√©
        if (process.argv.includes('--with-examples')) {
            await seedSampleSessions(coaches);
        }
        
        // Afficher les statistiques
        await showStatistics();
        
        console.log('\nüéâ Initialisation termin√©e avec succ√®s!');
        
    } catch (error) {
        console.error('\n‚ùå Erreur durant l\'initialisation:', error.message);
        process.exit(1);
    } finally {
        // Fermer la connexion MongoDB
        await mongoose.connection.close();
        console.log('üîå Connexion MongoDB ferm√©e');
    }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
    main();
}

module.exports = { seedCoaches, seedSampleSessions };
